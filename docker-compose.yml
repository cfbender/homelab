version: "3.7"

networks:
  default:
    name: "homelab_default"
    driver: bridge
    driver_opts:
      com.docker.network.bridge.host_binding_ipv4: ${SERVER_IP}
    ipam:
      config:
        - subnet: 172.20.69.0/24

services:
  # https://hub.docker.com/_/traefik/
  traefik:
    image: traefik:latest
    container_name: traefik
    restart: unless-stopped
    environment:
      TZ: "${TZ}"
      CF_API_EMAIL: "${CF_API_EMAIL}"
      CF_API_KEY: "${CF_API_KEY}"
    networks:
      - default
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/log:/var/log
      - ./traefik:/etc/traefik:rw
    labels:
      traefik.enable: "true"
      traefik.docker.network: homelab_default
      traefik.http.routers.traefik.tls.certresolver: prod
      traefik.http.routers.traefik.rule: Host(`${TRAEFIK_HOST}`)
      traefik.http.routers.traefik.middlewares: hsts-header, traefik-forward-auth
      traefik.http.routers.traefik.service: api@internal
      traefik.http.middlewares.test-auth.basicauth.users: "${BASICAUTH_USERS}"
      traefik.http.middlewares.basicauth.basicauth.usersfile: /etc/traefik/.htpasswd
      traefik.http.middlewares.ipallowlist.ipwhitelist.sourcerange: "${IPALLOWLIST}"
      traefik.http.middlewares.hsts-header.headers.customResponseHeaders.Strict-Transport-Security: "max-age=63072000"
    extra_hosts:
      - host.docker.internal:172.17.0.1

  # https://hub.docker.com/r/netdata/netdata
  netdata:
    image: netdata/netdata
    container_name: netdata
    restart: unless-stopped
    hostname: ${NETDATA_HOST}
    environment:
      PGID: ${DOCKER_PGID}
      TZ: ${TZ}
    cap_add:
      - SYS_PTRACE
    security_opt:
      - apparmor:unconfined
    volumes:
      - /etc/passwd:/host/etc/passwd:ro
      - /etc/group:/host/etc/group:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - default
    dns: ${SERVER_IP}
    labels:
      traefik.enable: "true"
      traefik.docker.network: homelab_default
      traefik.http.routers.netdata.tls.certresolver: prod
      traefik.http.routers.netdata.rule: Host(`${NETDATA_HOST}`)
      traefik.http.routers.netdata.middlewares: hsts-header, traefik-forward-auth

  # https://github.com/esphome/esphome
  esphome:
    image: esphome/esphome
    container_name: esphome
    network_mode: host
    restart: unless-stopped
    environment:
      TZ: ${TZ}
    volumes:
      - ${CONFIG_DIR}/esphome:/config
    dns: ${SERVER_IP}
    labels:
      traefik.enable: "true"
      traefik.http.routers.esphome.tls.certresolver: prod
      traefik.http.routers.esphome.rule: Host(`${ESPHOME_HOST}`)
      traefik.http.routers.esphome.middlewares: hsts-header, traefik-forward-auth
      traefik.http.services.esphome.loadbalancer.server.port: 6052
      traefik.http.services.esphome.loadbalancer.server.scheme: http

  # https://github.com/cdr/code-server
  code:
    image: lscr.io/linuxserver/code-server
    container_name: code
    restart: unless-stopped
    environment:
      TZ: ${TZ}
      PUID: ${PUID}
      PGID: ${PGID}
      SUDO_PASSWORD_HASH: ${CODE_SUDO_PASSWORD_HASH}
      PORT: ${CODE_PORT}
    volumes:
      - ${CONFIG_DIR}/code:/config
      - ${CODE_DIR}:/home/code
    networks:
      - default
    dns: ${SERVER_IP}
    labels:
      traefik.enable: "true"
      traefik.docker.network: homelab_default
      traefik.http.routers.code.tls.certresolver: prod
      traefik.http.routers.code.rule: Host(`${CODE_HOST}`)
      traefik.http.routers.code.middlewares: hsts-header, traefik-forward-auth
      traefik.http.services.code.loadbalancer.server.port: ${CODE_PORT}
      traefik.http.services.code.loadbalancer.server.scheme: http

  # https://github.com/cfbender/personal-site
  personal-site:
    container_name: personal-site
    build:
      context: ../personal-site
      dockerfile: Dockerfile
      args:
        - SHOW_DASHBOARD=true
    restart: unless-stopped
    environment:
      PORT: ${WWW_PORT}
      SECRET_KEY_BASE: ${SECRET_KEY_BASE}
      HOSTNAME: ${COOKIE_DOMAIN}
    networks:
      - default
    dns: ${SERVER_IP}
    labels:
      com.centurylinklabs.watchtower.enable: "false"
      traefik.enable: "true"
      traefik.docker.network: homelab_default
      traefik.http.routers.personal-site.tls.certresolver: prod
      traefik.http.routers.personal-site.rule: "Host(`${PERSONAL_SITE_HOST}`) || Host(`${COOKIE_DOMAIN}`)"
      traefik.http.routers.personal-site.middlewares: hsts-header
      traefik.http.routers.personal-site-dashboard.tls.certresolver: prod
      traefik.http.routers.personal-site-dashboard.rule: "(Host(`${PERSONAL_SITE_HOST}`) || Host(`${COOKIE_DOMAIN}`)) && PathPrefix(`${DASHBOARD_PATH}`)"
      traefik.http.routers.personal-site-dashboard.middlewares: hsts-header, traefik-forward-auth
      traefik.http.services.personal-site.loadbalancer.server.port: ${WWW_PORT}
      traefik.http.services.personal-site.loadbalancer.server.scheme: http

  # https://registry.hub.docker.com/r/adguard/adguardhome
  adguard:
    image: adguard/adguardhome
    container_name: adguard
    restart: unless-stopped
    network_mode: host
    volumes:
      - ${DATA_DIR}/adguard:/opt/adguardhome/work
      - ${CONFIG_DIR}/adguard:/opt/adguardhome/conf
    dns: ${GATEWAY_IP}
    labels:
      traefik.enable: "true"
      traefik.http.routers.adguard.tls.certresolver: prod
      traefik.http.routers.adguard.rule: Host(`${ADGUARD_HOST}`)
      traefik.http.routers.adguard.middlewares: hsts-header
      # Be sure to configure this after install to bind to this port instead of 80!
      traefik.http.services.adguard.loadbalancer.server.port: 3333
      traefik.http.services.adguard.loadbalancer.server.scheme: http

  # https://github.com/bakito/adguardhome-sync/
  adguard-sync:
    image: lscr.io/linuxserver/adguardhome-sync
    restart: unless-stopped
    container_name: adguard-sync
    environment:
      PUID: ${PUID}
      PGID: ${PUID}
      TZ: ${TZ}
      CONFIGFILE: /config/adguardhome-sync.yaml
    volumes:
      - ${CONFIG_DIR}/adguard:/config
    ports:
      - 8090:8080
    networks:
      - default
    dns: ${SERVER_IP}

  # https://github.com/thomseddon/traefik-forward-auth
  traefik-forward-auth:
    image: thomseddon/traefik-forward-auth:2
    container_name: traefik-forward-auth
    restart: unless-stopped
    environment:
      - PROVIDERS_GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - PROVIDERS_GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - SECRET=${AUTH_SECRET}
      - WHITELIST=${OAUTH_WHITELIST}
      - LOG_LEVEL=debug
      - AUTH_HOST=${AUTH_HOST}
      - COOKIE_DOMAIN=${COOKIE_DOMAIN}
      - LIFETIME=604800 # 1 week
    networks:
      - default
    dns: ${SERVER_IP}
    labels:
      traefik.enable: "true"
      traefik.docker.network: homelab_default
      traefik.http.routers.traefik-forward-auth.tls.certresolver: prod
      traefik.http.routers.traefik-forward-auth.rule: Host(`${AUTH_HOST}`)
      traefik.http.routers.traefik-forward-auth.middlewares: traefik-forward-auth
      traefik.http.middlewares.traefik-forward-auth.forwardauth.address: http://traefik-forward-auth:4181
      traefik.http.middlewares.traefik-forward-auth.forwardauth.authResponseHeaders: X-Forwarded-User
      traefik.http.services.traefik-forward-auth.loadbalancer.server.port: 4181

  # https://github.com/containrrr/watchtower/
  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    restart: unless-stopped
    environment:
      TZ: ${TZ}
      WATCHTOWER_NOTIFICATIONS: "shoutrrr"
      WATCHTOWER_NOTIFICATION_URL: ${WATCHTOWER_NOTIFICATION_URL}
      WATCHTOWER_CLEANUP: "true"
      WATCHTOWER_WARN_ON_HEAD_FAILURE: "never"
    command: --schedule "0 0 20 * * *" # runs daily at 8 PM
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - default
    dns: ${SERVER_IP}

  # https://github.com/portainer/portainer
  portainer:
    image: portainer/portainer-ce
    container_name: portainer
    restart: unless-stopped
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${DATA_DIR}/portainer:/data
    networks:
      - default
    dns: ${SERVER_IP}
    labels:
      traefik.enable: "true"
      traefik.docker.network: homelab_default
      traefik.http.routers.portainer.tls.certresolver: prod
      traefik.http.routers.portainer.rule: Host(`${PORTAINER_HOST}`)
      traefik.http.routers.portainer.middlewares: hsts-header
      traefik.http.services.portainer.loadbalancer.server.port: 9000
      traefik.http.services.portainer.loadbalancer.server.scheme: http

  # https://github.com/linuxserver/docker-unifi-controller
  unifi:
    image: lscr.io/linuxserver/unifi-controller
    container_name: unifi
    restart: unless-stopped
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
    volumes:
      - ${CONFIG_DIR}/unifi:/config
    ports:
      - 3478:3478/udp
      - 10001:10001/udp
      - 8080:8080
      - 8443:8443
      - 6789:6789 # optional
    networks:
      - default
    dns: ${SERVER_IP}
    labels:
      traefik.enable: "true"
      traefik.docker.network: homelab_default
      traefik.http.routers.unifi.tls.certresolver: prod
      traefik.http.routers.unifi.rule: Host(`${UNIFI_HOST}`)
      traefik.http.routers.unifi.middlewares: hsts-header
      traefik.http.services.unifi.loadbalancer.server.port: 8443
      traefik.http.services.unifi.loadbalancer.server.scheme: https

  # https://github.com/BookStackApp/BookStack
  bookstack:
    image: lscr.io/linuxserver/bookstack
    container_name: bookstack
    restart: unless-stopped
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      APP_URL: https://${BOOKSTACK_HOST}
      DB_HOST: bookstack_db
      DB_DATABASE: bookstackapp
      DB_USERNAME: ${BOOKSTACK_DB_USER}
      DB_PASSWORD: ${BOOKSTACK_DB_PASS}
    volumes:
      - ${DATA_DIR}/bookstack:/config
    depends_on:
      - bookstack_db
    networks:
      - default
    dns: ${SERVER_IP}
    labels:
      traefik.enable: "true"
      traefik.docker.network: homelab_default
      traefik.http.routers.bookstack.tls.certresolver: prod
      traefik.http.routers.bookstack.rule: Host(`${BOOKSTACK_HOST}`)
      traefik.http.routers.bookstack.middlewares: hsts-header
      traefik.http.services.bookstack.loadbalancer.server.port: 80
      traefik.http.services.bookstack.loadbalancer.server.scheme: http

  bookstack_db:
    image: lscr.io/linuxserver/mariadb
    container_name: bookstack_db
    restart: unless-stopped
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      TZ: ${TZ}
      MYSQL_DATABASE: bookstackapp
      MYSQL_USER: ${BOOKSTACK_DB_USER}
      MYSQL_PASSWORD: ${BOOKSTACK_DB_PASS}
      MYSQL_ROOT_PASSWORD: ${BOOKSTACK_DB_ROOT_PASS}
    volumes:
      - ${DATA_DIR}/bookstack_db:/config
    networks:
      - default
    dns: ${SERVER_IP}

  # https://github.com/linuxserver/docker-wireguard
  wireguard:
    image: lscr.io/linuxserver/wireguard
    container_name: wireguard
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      TZ: ${TZ}
      SERVERURL: ${WIREGUARD_HOST}
      SERVERPORT: 51820
      PEERS: 5
      PEERDNS: auto
    ports:
      - 51820:51820/udp
    volumes:
      - ${CONFIG_DIR}/wireguard:/config
      - /lib/modules:/lib/modules
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    dns: ${SERVER_IP}

  mosquitto:
    image: eclipse-mosquitto
    container_name: mosquitto
    restart: unless-stopped
    environment:
      TZ: ${TZ}
    ports:
      - 1883:1883/tcp
      - 9001:9001/tcp
    volumes:
      - ${CONFIG_DIR}/mosquitto:/mosquitto/config
      - ${DATA_DIR}/mosquitto:/mosquitto/data
      - ${DATA_DIR}/mosquitto/log:/mosquitto/log
      - /etc/localtime:/etc/localtime:ro
    networks:
      - default
    dns: ${SERVER_IP}

  fail2ban:
    image: crazymax/fail2ban:latest
    container_name: fail2ban
    restart: unless-stopped
    network_mode: host
    environment:
      TZ: ${TZ}
    cap_add:
      - NET_ADMIN
      - NET_RAW
    volumes:
      - ./fail2ban:/data
      - ./traefik/log/access.log:/var/log/access.log:ro
      - ${CONFIG_DIR}/home/home-assistant.log:/var/log/home-assistant.log:ro
      - /var/log/auth.log:/var/log/auth.log:ro
    dns: ${SERVER_IP}

  # https://github.com/benbusby/whoogle-search
  whoogle:
    image: benbusby/whoogle-search
    container_name: whoogle
    restart: unless-stopped
    pids_limit: 50
    mem_limit: 256mb
    memswap_limit: 256mb
    # user debian-tor from tor package
    user: whoogle
    security_opt:
      - no-new-privileges
    cap_drop:
      - ALL
    tmpfs:
      - /config/:size=10M,uid=927,gid=927,mode=1700
      - /var/lib/tor/:size=15M,uid=927,gid=927,mode=1700
      - /run/tor/:size=1M,uid=927,gid=927,mode=1700
    environment:
      TZ: ${TZ}
      WHOOGLE_CONFIG_THEME: system
      WHOOGLE_CONFIG_PREFERENCES_ENCRYPTED: 1
      WHOOGLE_CONFIG_PREFERENCES_KEY: ${WHOOGLE_PREFERENCES_KEY}
      WHOOGLE_CONFIG_COUNTRY: US
      WHOOGLE_CONFIG_SEARCH_LANGUAGE: lang_en
      WHOOGLE_CONFIG_GET_ONLY: 1
      WHOOGLE_CONFIG_DISABLE: 0
      WHOOGLE_CONFIG_VIEW_IMAGE: 1
      WHOOGLE_CONFIG_NEW_TAB: 0
    ports:
      - 5000:5000/tcp
    dns: ${SERVER_IP}
    labels:
      traefik.enable: "true"
      traefik.docker.network: homelab_default
      traefik.http.routers.whoogle-opensearch.tls.certresolver: prod
      traefik.http.routers.whoogle-opensearch.rule: "(Host(`${WHOOGLE_HOST}`) && Path(`/opensearch.xml`))"
      traefik.http.routers.whoogle-opensearch.middlewares: hsts-header
      traefik.http.routers.whoogle.tls.certresolver: prod
      traefik.http.routers.whoogle.rule: Host(`${WHOOGLE_HOST}`)
      traefik.http.routers.whoogle.middlewares: hsts-header, traefik-forward-auth
      traefik.http.services.whoogle.loadbalancer.server.port: 5000
      traefik.http.services.whoogle.loadbalancer.server.scheme: http

  #https://github.com/Lissy93/dashy
  dashy:
    image: lissy93/dashy:latest
    container_name: dashy
    restart: unless-stopped
    environment:
      TZ: ${TZ}
      WHOOGLE_CONFIG_THEME: system
      WHOOGLE_CONFIG_PREFERENCES_ENCRYPTED: 1
      WHOOGLE_CONFIG_PREFERENCES_KEY: ${WHOOGLE_PREFERENCES_KEY}
      WHOOGLE_CONFIG_COUNTRY: US
      WHOOGLE_CONFIG_SEARCH_LANGUAGE: lang_en
      WHOOGLE_CONFIG_GET_ONLY: 1
      WHOOGLE_CONFIG_DISABLE: 0
      WHOOGLE_CONFIG_VIEW_IMAGE: 1
      WHOOGLE_CONFIG_NEW_TAB: 0
      NODE_ENV: production
    ports:
      - 8081:80/tcp
    dns: ${SERVER_IP}
    volumes:
      - ${CONFIG_DIR}/dashy/dashy-conf.yml:/app/public/conf.yml
    healthcheck:
      test: ["CMD", "node", "/app/services/healthcheck"]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      traefik.enable: "true"
      traefik.docker.network: homelab_default
      traefik.http.routers.dashy.tls.certresolver: prod
      traefik.http.routers.dashy.rule: Host(`${DASHY_HOST}`)
      traefik.http.routers.dashy.middlewares: hsts-header, traefik-forward-auth
      traefik.http.services.dashy.loadbalancer.server.port: 80
      traefik.http.services.dashy.loadbalancer.server.scheme: http

  #https://github.com/cfbender/edison
  edison:
    container_name: edison
    build:
      context: ../edison
      dockerfile: Dockerfile
      args:
        - EDISON_MECHMARKET_ROLE_ID=${EDISON_MECHMARKET_ROLE_ID}
        - EDISON_MECHMARKET_QUERY=${EDISON_MECHMARKET_QUERY}
        - EDISON_MECHMARKET_CHANNEL=${EDISON_MECHMARKET_CHANNEL}
        - EDISON_BOT_TOKEN=${EDISON_BOT_TOKEN}
    restart: unless-stopped
    dns: ${SERVER_IP}
    labels:
      com.centurylinklabs.watchtower.enable: "false"
    environment:
      EDISON_MECHMARKET_ROLE_ID: ${EDISON_MECHMARKET_ROLE_ID}
      EDISON_MECHMARKET_QUERY: ${EDISON_MECHMARKET_QUERY}
      EDISON_MECHMARKET_CHANNEL: ${EDISON_MECHMARKET_CHANNEL}
      EDISON_BOT_TOKEN: ${EDISON_BOT_TOKEN}

  #https://github.com/LemmyNet/lemmy
  lemmy:
    image: dessalines/lemmy
    container_name: lemmy
    restart: unless-stopped
    environment:
      TZ: ${TZ}
      LEMMY_DATABASE_URL: postgres://${LEMMY_DB_USER}:${LEMMY_DB_PASSWORD}@postgres:5432/${LEMMY_DB}
      LEMMY_CORS_ORIGIN: https://${LEMMY_HOST}
    dns: ${SERVER_IP}
    depends_on:
      - lemmy-postgres
      - pictrs
    volumes:
      - ${CONFIG_DIR}/lemmy/lemmy.hjson:/config/config.hjson:Z
    labels:
      traefik.enable: "true"
      traefik.docker.network: homelab_default
      traefik.http.routers.lemmy.tls.certresolver: prod
      traefik.http.routers.lemmy.rule: Host(`${LEMMY_HOST}`) && (Path(`/{path:(api|pictrs|feeds|nodeinfo|.well-known).*}`) || METHOD(`POST`) || HeadersRegexp(`Accept`, `^application/.*$$`))
      traefik.http.routers.lemmy.middlewares: hsts-header
      traefik.http.services.lemmy.loadbalancer.server.port: 8536
      traefik.http.services.lemmy.loadbalancer.server.scheme: http

  lemmy-ui:
    image: dessalines/lemmy-ui
    container_name: lemmy-ui
    restart: unless-stopped
    environment:
      TZ: ${TZ}
      # this needs to match the hostname defined in the lemmy service
      LEMMY_UI_LEMMY_INTERNAL_HOST: lemmy:8536
      # set the outside hostname here
      LEMMY_UI_LEMMY_EXTERNAL_HOST: ${LEMMY_HOST}
      LEMMY_HTTPS: "false"
    depends_on:
      - lemmy
    labels:
      traefik.enable: "true"
      traefik.docker.network: homelab_default
      traefik.http.routers.lemmy-ui.tls.certresolver: prod
      traefik.http.routers.lemmy-ui.rule: Host(`${LEMMY_HOST}`)
      traefik.http.routers.lemmy-ui.middlewares: hsts-header
      traefik.http.services.lemmy-ui.loadbalancer.server.port: 1234
      traefik.http.services.lemmy-ui.loadbalancer.server.scheme: http

  pictrs:
    image: asonix/pictrs
    # this needs to match the pictrs url in lemmy.hjson
    hostname: pictrs
    restart: unless-stopped
    # we can set options to pictrs like this, here we set max. image size and forced format for conversion
    # entrypoint: /sbin/tini -- /usr/local/bin/pict-rs -p /mnt -m 4 --image-format webp
    environment:
      - PICTRS__API_KEY=${PICTRS_API_KEY}
      - PICTRS__MEDIA__VIDEO_CODEC=vp9
      - PICTRS__MEDIA__GIF__MAX_WIDTH=256
      - PICTRS__MEDIA__GIF__MAX_HEIGHT=256
      - PICTRS__MEDIA__GIF__MAX_AREA=65536
      - PICTRS__MEDIA__GIF__MAX_FRAME_COUNT=400
    user: 991:991
    volumes:
      - ${DATA_DIR}/pictrs:/mnt:Z

  lemmy-postgres:
    image: postgres:15-alpine
    # this needs to match the database host in lemmy.hson
    # Tune your settings via
    # https://pgtune.leopard.in.ua/#/
    # You can use this technique to add them here
    # https://stackoverflow.com/a/30850095/1655478
    restart: unless-stopped
    hostname: postgres
    command:
      [
        "postgres",
        "-c",
        "session_preload_libraries=auto_explain",
        "-c",
        "auto_explain.log_min_duration=5ms",
        "-c",
        "auto_explain.log_analyze=true",
        "-c",
        "track_activity_query_size=1048576",
      ]
    ports:
      # use a different port so it doesnt conflict with potential postgres db running on the host
      - 5433:5432
    environment:
      POSTGRES_USER: ${LEMMY_DB_USER}
      POSTGRES_PASSWORD: ${LEMMY_DB_PASSWORD}
      POSTGRES_DB: ${LEMMY_DB}
    volumes:
      - ${DATA_DIR}/postgres:/var/lib/postgresql/data:Z

  # https://github.com/hay-kot/homebox
  homebox:
    image: ghcr.io/hay-kot/homebox:latest
    container_name: homebox
    restart: unless-stopped
    environment:
      - HBOX_LOG_LEVEL=info
      - HBOX_LOG_FORMAT=text
      - HBOX_WEB_MAX_UPLOAD_SIZE=10
    volumes:
      - ${DATA_DIR}/homebox:/data/
    ports:
      - 3100:7745
    labels:
      traefik.enable: "true"
      traefik.docker.network: homelab_default
      traefik.http.routers.homebox.tls.certresolver: prod
      traefik.http.routers.homebox.rule: Host(`${HOMEBOX_HOST}`)
      traefik.http.routers.homebox.middlewares: hsts-header, traefik-forward-auth
